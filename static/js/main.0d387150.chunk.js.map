{"version":3,"sources":["index.js"],"names":["Square","props","useState","className","onClick","onClickEvent","value","Board","initialSquares","Array","fill","squares","setSquares","xIsNext","setXIsNext","renderSquare","i","newSquares","winnerDeclared","Boolean","calculateWinner","squareFilled","handleClickEvent","winner","status","Game","line","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"oMAIMA,EAAS,SAACC,GAAW,IAAD,EACIC,mBAAS,MADb,6BAGxB,OACE,wBACEC,UAAU,SACVC,QAASH,EAAMI,aAFjB,SAIGJ,EAAMK,SAMPC,EAAQ,WACZ,IAAMC,EAAiBC,MAAM,GAAGC,KAAK,MADnB,EAEcR,mBAASM,GAFvB,mBAEVG,EAFU,KAEDC,EAFC,OAGcV,oBAAS,GAHvB,mBAGVW,EAHU,KAGDC,EAHC,KAmBZC,EAAe,SAACC,GACpB,OACE,cAAChB,EAAD,CACEM,MAAOK,EAAQK,GACfX,aAAc,kBAlBK,SAACW,GACxB,IAAMC,EAAU,YAAON,GAEjBO,EAAiBC,QAAQC,EAAgBH,IACzCI,EAAeF,QAAQF,EAAWD,IACrCE,GAAkBG,IAIrBJ,EAAWD,GAAKH,EAAU,IAAM,IAChCD,EAAWK,GACXH,GAAYD,IAOYS,CAAiBN,OAKrCO,EAASH,EAAgBT,GACzBa,EAASD,EAAM,kBACRA,GADQ,uBAEHV,EAAU,IAAM,KAElC,OACE,gCACE,qBAAKV,UAAU,SAAf,SAAyBqB,IACzB,sBAAKrB,UAAU,aAAf,UACGY,EAAa,KAAMA,EAAa,KAAMA,EAAa,QAEtD,sBAAKZ,UAAU,aAAf,UACGY,EAAa,KAAMA,EAAa,KAAMA,EAAa,QAEtD,sBAAKZ,UAAU,aAAf,UACGY,EAAa,KAAMA,EAAa,KAAMA,EAAa,YAOtDU,EAAO,WACX,OACE,sBAAKtB,UAAU,OAAf,6BAEE,cAACI,EAAD,QAUN,SAASa,EAAgBT,GAOvB,IANA,IAMA,MANc,CACZ,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAC7B,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAC7B,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,IAGpB,eAAyB,CAApB,IAAIe,EAAI,KAAY,cACHA,EADG,GACfC,EADe,KACZC,EADY,KACTC,EADS,KAGvB,GAAIlB,EAAQgB,IAAMhB,EAAQgB,KAAOhB,EAAQiB,IAAMjB,EAAQgB,KAAOhB,EAAQkB,GACpE,OAAOlB,EAAQgB,GAInB,OAAO,KApBTG,IAASC,OACP,cAACN,EAAD,IACAO,SAASC,eAAe,W","file":"static/js/main.0d387150.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst Square = (props) => {\n  const [ value, setValue ] = useState(null);\n\n  return (\n    <button \n      className='square'\n      onClick={props.onClickEvent}\n    >\n      {props.value}\n    </button>\n  )\n}\n\n\nconst Board = () => {\n  const initialSquares = Array(9).fill(null);\n  const [ squares, setSquares ] = useState(initialSquares);\n  const [ xIsNext, setXIsNext ] = useState(true);\n\n  const handleClickEvent = (i) => {\n    const newSquares = [...squares];\n\n    const winnerDeclared = Boolean(calculateWinner(newSquares));\n    const squareFilled = Boolean(newSquares[i]);\n    if(winnerDeclared || squareFilled) {\n      return;\n    }\n    \n    newSquares[i] = xIsNext ? 'X' : 'O';\n    setSquares(newSquares);\n    setXIsNext(!xIsNext);\n  }\n\n  const renderSquare = (i) => {\n    return(\n      <Square \n        value={squares[i]}\n        onClickEvent={() => handleClickEvent(i)}  \n      />\n    )\n  }\n\n  const winner = calculateWinner(squares);\n  const status = winner ?\n    `Winner: ${winner}` :\n    `Next Player: ${xIsNext ? 'X' : 'O'}`;\n\n  return (\n    <div>\n      <div className='status'>{status}</div>\n      <div className='border-row'>\n        {renderSquare('0')}{renderSquare('1')}{renderSquare('2')}\n      </div>\n      <div className='border-row'>\n        {renderSquare('3')}{renderSquare('4')}{renderSquare('5')}\n      </div>\n      <div className='border-row'>\n        {renderSquare('6')}{renderSquare('7')}{renderSquare('8')}\n      </div>\n    </div>\n  )\n}\n\n\nconst Game = () => {\n  return (\n    <div className='game'>\n      Tic-Tac-Toe Game\n      <Board />\n    </div>\n  )\n}\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2], [3, 4, 5], [6, 7, 8],\n    [0, 3, 6], [1, 4, 7], [2, 5, 8],\n    [0, 4, 8], [2, 4, 6],\n  ];\n\n  for( let line of lines ) {\n    const [ a, b, c ] = line;\n\n    if( squares[a] && squares[a] === squares[b] && squares[a] === squares[c] ) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}"],"sourceRoot":""}